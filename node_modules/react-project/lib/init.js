'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = init;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _LogUtils = require('./LogUtils');

var _PackageUtils = require('./PackageUtils');

require('shelljs/global');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _Constants = require('./Constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*eslint-env shelljs*/
function init(cb) {
  var pkg = (0, _PackageUtils.getPackageJSON)();
  (0, _LogUtils.log)('This is going to add a bunch of files and edit your package.json.', 'You probably want to have a clean git working tree before continuing.', 'That way you can reset the changes about to made with `git reset`.');
  (0, _LogUtils.promptApproval)('Do you want to continue?', function () {
    (0, _LogUtils.log)('copying project blueprint');
    var blueprint = _path2.default.join(__dirname, '..', 'blueprint', '/');

    // release.sh moves blueprint/package.json to here
    var blueprintPkg = require('../blueprint/package.json');

    cp('-R', blueprint, _Constants.APP_PATH)

    // cp -R bug https://github.com/shelljs/shelljs/issues/140
    ;['.babelrc', '.env', '.eslintrc'].forEach(function (file) {
      cp(_path2.default.join(blueprint, file), _path2.default.join(_Constants.APP_PATH, file));
    });

    // release.sh renames these since npm publish would exclude them otherwise
    mv(_path2.default.join(_Constants.APP_PATH, 'gitignore'), _path2.default.join(_Constants.APP_PATH, '.gitignore'));
    mv(_path2.default.join(_Constants.APP_PATH, 'npmrc'), _path2.default.join(_Constants.APP_PATH, '.npmrc'));

    (0, _LogUtils.log)('Adding scripts to package.json');
    (0, _PackageUtils.copyProps)(blueprintPkg, pkg, 'scripts');
    (0, _PackageUtils.copyProps)(blueprintPkg, pkg, 'react-project');
    (0, _PackageUtils.copyProps)(blueprintPkg, pkg, 'dependencies');
    _fs2.default.writeFileSync(_PackageUtils.pkgPath, JSON.stringify(pkg, null, 2));

    (0, _LogUtils.log)();
    (0, _LogUtils.log)('Now run:');
    (0, _LogUtils.log)('');
    (0, _LogUtils.log)('  npm install && npm start');
    (0, _LogUtils.log)('');
    cb();
  });
}

//function checkDotEnv(cb) {
//const exists = fs.existsSync(`${APP_PATH}/.dotenv`)
//if (exists) {
////validateDotEnv(cb)
//// TODO
//cb()
//} else {
//createDotEnv(cb)
//}
//}

//function createDotEnv(cb) {
//const filePath = `${APP_PATH}/.dotenv`
//promptFileApproval(filePath)
//cb()
//}

//function promptFileApproval(filepath) {
//log('I need to create the following file')
//log()
//log(`  ${filepath}`)
//log()
//promptApproval('Can I create the file?')
//}