'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _webpackShared = require('./webpack.shared.config');

var SHARED = _interopRequireWildcard(_webpackShared);

var _webpackSharedClient = require('./webpack.shared.client.config');

var SHARED_CLIENT = _interopRequireWildcard(_webpackSharedClient);

var _Constants = require('./Constants');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HOT = process.env.AUTO_RELOAD === 'hot';
var REFRESH = process.env.AUTO_RELOAD === 'refresh';

exports.default = {

  devtool: 'cheap-module-eval-source-map',

  entry: getEntry(),

  output: {
    path: SHARED_CLIENT.BUILD_PATH,
    filename: '[name].js',
    publicPath: 'http://' + _Constants.DEV_HOST + ':' + _Constants.DEV_PORT + '/'
  },

  module: {
    loaders: SHARED_CLIENT.LOADERS.concat([getBabelLoader(), SHARED_CLIENT.STYLE_LOADER])
  },

  plugins: getPlugins(),

  devServer: {
    hot: HOT,
    contentBase: false,
    quiet: false,
    noInfo: false,
    stats: {
      assets: true,
      version: false,
      hash: false,
      timings: false,
      chunks: false,
      chunkModules: true
    }
  }

};


function getBabelLoader() {
  // we can't use the "dev" config in babelrc because we don't always
  // want it, sometimes we want refresh, sometimes we want none. Also, we
  // don't want it in the server bundle either (not yet anyway?)
  var loader = { test: SHARED.JS_REGEX, exclude: /node_modules/, loader: 'babel-loader' };
  if (HOT) {
    var rc = JSON.parse(_fs2.default.readFileSync(_path2.default.join(SHARED.APP_PATH, '.babelrc')));
    loader.query = { presets: rc.presets.concat(['react-hmre']) };
  }
  return loader;
}

function getEntry() {
  // since all configs are required at once, we can't be mutating
  // anything, will clean this up when webpack configs can export functions
  // https://gist.github.com/sokra/27b24881210b56bbaff7#configuration
  var entry = _extends({}, SHARED_CLIENT.ENTRY);
  entry._vendor = entry._vendor.slice(0);
  if (HOT) {
    entry._vendor.unshift('webpack/hot/dev-server');
  }
  if (HOT || REFRESH) {
    entry._vendor.unshift('webpack-dev-server/client?http://' + _Constants.DEV_HOST + ':' + _Constants.DEV_PORT);
  }
  return entry;
}

function getPlugins() {
  var plugins = SHARED_CLIENT.PLUGINS.slice(0);
  plugins.push(new _webpack2.default.BannerPlugin('\n      if (!window.__reactProjectDebugRan__) {\n        window.__reactProjectDebugRan__ = true\n        console.debug(\'[react-project] NODE_ENV=' + process.env.NODE_ENV + '\');\n        console.debug(\'[react-project] AUTO_REFRESH=' + process.env.AUTO_RELOAD + '\');\n        if (!location.search.match(/__ssr/)) {\n           console.debug(\n             \'[react-project] SSR disabled in dev. Enable with\',\n             location.search ? location.href + \'&__ssr\' : location.href + \'?__ssr\'\n           );\n        }\n      }\n    ', { raw: true, entryOnly: true }));
  if (HOT) {
    plugins.push(new _webpack2.default.HotModuleReplacementPlugin());
  }
  return plugins;
}